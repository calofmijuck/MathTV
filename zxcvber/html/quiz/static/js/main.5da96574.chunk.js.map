{"version":3,"sources":["InputName.js","Question.js","Answer.js","Result.js","HobulhoApp.js","HobulhoAppContainer.js","serviceWorker.js","index.js"],"names":["InputName","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","name","_this2","react_default","a","createElement","author","onSubmit","handleUserName","className","htmlFor","id","placeholder","type","required","value","onChange","evt","setState","target","Component","Question","what","handleAnswer","subject","choice","prog","Math","floor","qindex","qcount","style","width","onClick","answer","bind","ANSWER_CLASS","like","dislike","Answer","Result","msg","correct","authorAnswer","reduce","x","i","userAnswer","length","score","round","user","map","src_Answer","assign","key","reset","makeInitialState","HobulhoApp","ans","concat","questions","src_Question","src_Result","src_InputName","App","src_HobulhoApp_0","Boolean","window","location","hostname","match","ReactDOM","render","HobulhoAppContainer","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5da96574.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './HobulhoApp.css';\n\nclass InputName extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: ''\n        };\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>{this.props.author}님의 호불호와 비교해 보세요!</h1>\n                <p>질문들에 대해 여러분의 취향대로 답해주시면 됩니다!</p>\n                <hr />\n                <form onSubmit={() => this.props.handleUserName(this.state.name)}>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"username\">당신의 이름을 입력해주세요.</label>\n                        <br/>\n                        <input id=\"username\"\n                        placeholder=\"이름\"\n                        className=\"form-control\" type=\"text\" required\n                            value={this.state.name}\n                            onChange={(evt) => this.setState({name: evt.target.value})} />\n                    </div>\n                    <br/>\n                    <input className=\"stbtn\" type=\"submit\" value=\"시작하기!\" />\n                </form>\n            </div>\n        );\n    }\n}\n\nexport default InputName;\n","import React, { Component } from 'react'\nimport './HobulhoApp.css';\n\nclass Question extends Component {\n    answer(what) {\n        this.props.handleAnswer({\n            subject: this.props.subject,\n            choice: what\n        });\n    }\n\n    render() {\n        let prog = Math.floor((this.props.qindex + 1) / this.props.qcount * 1000) / 10;\n        let style = {\n            width: prog + '%',\n        }\n        return (\n            <div>\n                <div className=\"row\">\n                    <div className=\"col\">\n                        {this.props.author}\n                    </div>\n                    <div className=\"status\">\n                    {this.props.qindex+1} / {this.props.qcount}\n                    </div>\n                    <div className=\"progress\">\n                        <div className=\"bar\" style={style}>{ prog }%\n                        </div>\n                    </div>\n                </div><br/>\n                <h1>{this.props.subject}</h1><br/>\n                <input className=\"ybtn\"\n                    type=\"button\"\n                    value=\"호\"\n                    onClick={this.answer.bind(this,\"like\")}\n                /><br/>\n                <input className=\"nbtn\"\n                    type=\"button\"\n                    value=\"불호\"\n                    onClick={this.answer.bind(this,\"dislike\")}\n                />\n            </div>\n        );\n    }\n}\n\nexport default Question;\n","import React, { Component } from 'react'\n\nconst ANSWER_CLASS = {\n    'like': 'like',\n    'dislike': 'dislike'\n}\n\nclass Answer extends Component {\n    render() {\n        return (\n            <div className=\"ans\">\n                <span className={ANSWER_CLASS[this.props.choice]}>\n                {this.props.subject}\n                </span>\n            </div>\n        );\n    }\n}\n\nexport default Answer;\n","import React, { Component } from 'react'\nimport Answer from './Answer'\n\nclass Result extends Component {\n    render() {\n        let correct = this.props.authorAnswer.reduce(\n            (a, x, i) => {\n                return x.choice === this.props.userAnswer[i].choice ? a + 1 : a;\n            },\n            0\n        );\n        let qcount = this.props.authorAnswer.length;\n        let score = Math.round(100 * correct / qcount);\n        let msg;\n\n        if(score === 100) {\n            msg = <b>와!! 저랑 완벽하게 일치하시는군요! <br />저랑 맛있는거 먹으러 가요!! 스크린샷과 함께 연락주세요!!</b>;\n        }\n        return (\n            <div>\n                <h1>{this.props.author}님과의 호불호 일치도입니다!</h1>\n                <div className=\"text-center\">\n                    <span className=\"display-1\">{score}</span>점<br />\n                    <span className=\"display-6\">총 {qcount}개 중 {correct}개 일치</span>\n                </div>\n                { msg }\n                <hr />\n                {/* <h3>\n                {this.props.author}:&nbsp;\n                {this.props.authorAnswer.map(\n                    (x, i) => <Answer key={i} {...x} />\n                )}\n                </h3> <hr />*/}\n                <h3>\n                {this.props.user} 님의 호불호:&nbsp;\n                {this.props.userAnswer.map(\n                    (x, i) => <Answer key={i} {...x} />\n                )}\n                </h3>\n\n                <div>\n                    <input className=\"stbtn\"\n                        type=\"button\"\n                        value=\"다시하기!\"\n                        onClick={this.props.reset}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Result;\n","import React, { Component } from 'react';\nimport './HobulhoApp.css';\nimport InputName from './InputName';\nimport Question from './Question';\nimport Result from './Result';\n\nconst makeInitialState = () => {\n    return {\n        qindex: 0,\n        user: '',\n        userAnswer: []\n    };\n};\n\nclass HobulhoApp extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = makeInitialState();\n    }\n\n    reset() {\n        this.setState(makeInitialState());\n    }\n\n    handleUserName(name) {\n        this.setState({\n            user: name\n        });\n    }\n\n    handleAnswer(ans) {\n        this.setState({\n            qindex: this.state.qindex + 1,\n            userAnswer: this.state.userAnswer.concat(ans)\n        });\n    }\n\n    render() {\n        let qcount = this.props.questions.length;\n        return (\n            <div className=\"app-container\">\n            {!this.state.user ?\n                <InputName\n                author={this.props.author}\n                handleUserName={this.handleUserName.bind(this)} /> :\n                (\n                    this.state.qindex < qcount ?\n                    <Question {...this.props.questions[this.state.qindex]}\n                        author={this.props.author}\n                        qindex={this.state.qindex}\n                        qcount={qcount}\n                        handleAnswer={this.handleAnswer.bind(this)}\n                    /> :\n                    <Result\n                        author={this.props.author}\n                        authorAnswer={this.props.questions}\n                        user={this.state.user}\n                        userAnswer={this.state.userAnswer}\n                        reset={this.reset.bind(this)}\n                    />\n                )\n            }\n            </div>\n        );\n    }\n}\n\nexport default HobulhoApp;\n","import React, { Component } from 'react';\nimport HobulhoApp from './HobulhoApp'\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            author: \"이성찬\",\n            questions: [\n                {\n                    subject: \"마카롱\",\n                    choice: \"dislike\"\n                },\n                {\n                    subject: \"돼지껍데기\",\n                    choice: \"dislike\"\n                },\n                {\n                    subject: \"메밀소바\",\n                    choice: \"like\"\n                },\n                {\n                    subject: \"곱창\",\n                    choice: \"like\"\n                },\n                {\n                    subject: \"데자와\",\n                    choice: \"dislike\"\n                },\n                {\n                    subject: \"민트 초코 아이스크림\",\n                    choice: \"like\"\n                },\n                {\n                    subject: \"회\",\n                    choice: \"like\"\n                },\n                {\n                    subject: \"오이\",\n                    choice: \"like\"\n                }\n            ]\n        };\n    }\n\n    render() {\n        return (\n            <div className=\"container\">\n            <HobulhoApp {...this.state} />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport HobulhoAppContainer from './HobulhoAppContainer';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<HobulhoAppContainer />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}